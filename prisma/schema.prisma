// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String @id   @default(uuid())
  name                   String
  price                  Int
  discount               Int
  filePath               String
  imagePath              String
  description            String
  isAvailable            Boolean        @default(true)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  order                  Order[]
  DownloadVerification    DownloadVerification[]
  basketItems            BasketItem[]   // New relation for products in baskets
  likedItems             LikedItem[]
}

model User {
  id         String   @id     @default(uuid())
  email      String   @unique
  imagePath  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orders     Order[]
  basket     Basket?   // One-to-one relationship with Basket
  liked      Liked?
  isGuest    Boolean  @default(false)
}

model Order  {
  id         String   @id @default(uuid())
  pricePaid  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  productId  String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model DownloadVerification  {
  id         String   @id @default(uuid())
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Basket {
  id         String   @id @default(uuid())
  userId     String   @unique  // Each user has one basket
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  basketItems BasketItem[]      // Basket can hold multiple products
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model BasketItem {
  id          String   @id @default(uuid())
  quantity    Int
  basketId    String
  productId   String
  basket      Basket   @relation(fields: [basketId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Liked {
  id         String   @id @default(uuid())
  userId     String   @unique  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedItems LikedItem[]      
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LikedItem {
  id          String   @id @default(uuid())
  quantity    Int
  likedId     String
  productId   String
  liked       Liked   @relation(fields: [likedId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


